#summary What if LinLogLayout produces strange results?
#labels Featured

*I don't see any vertex in the visualization window.*

Check the box "Show all names." Now vertex names should be visible; the vertices are right besides the names.  If the vertices are very small, then the distances between the vertices in the computed layout are very large, probably because the graph has (almost) unconnected components.  Increase the parameter `gravFactor` of the constructor `MinimizerBarnesHut` or `MinimizerClassic`, which is called in the `main` method of the class `LinLogLayout`, to 0.1 (or even higher, if necessary) to avoid that the unconnected components fly to far away.


*Some vertices are placed so closely together that I can hardly discern them.*

Decrease the parameter `repuExponent` and/or increase the parameter `attrExponent` of the constructor of the `Minimizer`-class, which is called in the `main` method of the class `LinLogLayout`.  E.g., try the values -1.0 and 2.0 instead of the defaults 0.0 and 1.0.


*The tool prints "The node distances in the layout are extremely nonuniform."*

This means that the largest vertex distances in the layout are _much_ (by several orders of magnitude) larger than the smallest vertex distances, which makes it very difficult to find good energy minima.  Possible causes are unconnected components combined with an insufficient gravitation factor (see the first problem above), vertices of weight 0.0 (in the standard setting, these are vertices whose edges have all weight 0.0), and extremely nonuniform graph density combined with aggressive layout parameters (see the previous problem).  Especially for large graphs (> 1000 vertices), this message may appear a few times without indicating a serious problem.


*According to the tool output, the repulsion exponent changes during the energy minimization process.*

This is just an internal trick of the energy minimizer to produce better layouts, in particular to avoid bad local energy minima.  For some parameter values, energy is very difficult to minimize, and the minimizer is prone to get stuck in bad local minima.  In this case, the minimizer starts with "easier" parameter values that produce similar layouts, and then refines these layouts with the final (user-specifed) parameter values.


*Further questions are welcome.*